name: Deploy To Dev

on:
  workflow_dispatch:

jobs:
        
  build-backend:
    name: 'Build Back End API'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      
      - name: Restore dependencies
        run: dotnet restore

      - name: Build API
        run: dotnet build --no-restore

      - name: Run Application Unit Tests
        run: dotnet test api/tests/**/Hippo.Booking.Application.Tests.csproj --no-build --verbosity normal

      - name: Run Core Unit Tests
        run: dotnet test api/tests/**/Hippo.Booking.Core.Tests.csproj --no-build --verbosity normal
          
  build-frontend:
    name: 'Build Front End App'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          
      - name: Enable Corepack
        run: corepack enable

      - name: Run install
        uses: borales/actions-yarn@v4
        with:
          cmd: install
          dir: ./src/web/hippo-booking

      - name: Build production bundle
        uses: borales/actions-yarn@v4
        with:
          cmd: build
          dir: ./src/web/hippo-booking
          
      - name: Test the app
        uses: borales/actions-yarn@v4
        with:
          cmd: ci-test
          dir: ./src/web/hippo-booking
          
#      - name: Run Cypress Tests
#        working-directory: ./src/web/hippo-booking
#        run: |
#          npx cypress run --component
    
  e2e-tests:
    name: 'Run End-to-End Tests'
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    defaults:
      run:
        working-directory: ./src
    steps:
      - uses: actions/checkout@v4

#      - name: Run Docker Compose
#        run: docker compose -f infrastructure/docker/docker-compose.yml -f infrastructure/docker/docker-compose-services.yml up -d
#
#      - name: Run E2E Tests
#        run: dotnet test e2e/**/Hippo.Booking.E2ETests.csproj --verbosity normal
  
  pulumi-run:
    name: 'Provision Dev Infrastructure - Azure'
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    permissions:
      contents: read
      id-token: write
    environment:
      name: 'Development'
    defaults:
      run:
        working-directory: ./src/infrastructure/Hippo.Booking.Deploy.Azure
    steps:
      - uses: actions/checkout@v4

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Pulumi Install'
        uses: pulumi/actions@v5

      - name: 'Set Pulumi Secret Environment Variable'
        run: |
          PULUMI_CONFIG_PASSPHRASE=${{ secrets.PULUMI_SECRET_DEV }}
          echo "PULUMI_CONFIG_PASSPHRASE=${PULUMI_CONFIG_PASSPHRASE}" >>${GITHUB_ENV}

      - name: 'Pulumi Login'
        run: pulumi login "${{ secrets.PULUMI_AZURE_STATE_URL }}"

      - name: 'Pulumi Refresh'
        run: pulumi refresh --stack dev --yes

      - name: 'Pulumi Up'
        run: pulumi up --stack dev --yes

  #      - name: 'Run Azure CLI commands'
  #        run: |
  #          APIKEY=$(az staticwebapp secrets list --name hippo-booking-static-web-dev | jq -r '.properties.apiKey')
  #          echo $APIKEY


  package:
    name: 'Package API In Docker'
    if: github.event_name != 'pull_request'
    needs: [e2e-tests]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4
      
    - name: Lowercase the repo name and username
      run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
      
    - name: Build Back End API Docker Image
      run: |
        docker build . -t ghcr.io/${{ env.REPO }}:${{ github.sha }} -f api/Hippo.Booking.API/Dockerfile
      
    - uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Push Back End API Docker Image
      run: docker push ghcr.io/${{ env.REPO }}:${{ github.sha }}
      
  deploy-backend:
    name: Deploy API
    if: github.event_name != 'pull_request'
    permissions:
      contents: none
      id-token: write
    runs-on: ubuntu-latest
    needs: [package, pulumi-run]
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
      - name: Lowercase the repo name and username
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
        
      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Get publishing profile'
        run: |
          publishingProfile=$(az webapp deployment list-publishing-profiles --name ${{ vars.DEV_AZURE_WEBAPP_NAME }} --resource-group hippo-booking-rg-dev --xml)
          echo "PUBLISHING_PROFILE=$publishingProfile" >>${GITHUB_ENV}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ vars.DEV_AZURE_WEBAPP_NAME }}
          publish-profile: ${{ env.PUBLISHING_PROFILE }}
          images: 'ghcr.io/${{ env.REPO }}:${{ github.sha }}'

  deploy-frontend:
    permissions:
      contents: read # for actions/checkout to fetch code
      id-token: write
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    name: Deploy Front End
    needs: [pulumi-run]
    environment:
      name: 'Development'
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Get API deployment key'
        run: |
          APIKEY=$(az staticwebapp secrets list --name hippo-booking-static-web-dev | jq -r '.properties.apiKey')
          echo "API_KEY=$APIKEY" >>${GITHUB_ENV}
          
      - name: Deploy to Azure Static Web Apps
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ env.API_KEY }} # secret containing api token for app
#          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: "upload"
          ###### Repository/Build Configurations - These values can be configured to match you app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: 'src/web/hippo-booking'
#          api_location: ${{ env.API_LOCATION }}
          app_artifact_location: 'dist'
          ###### End of Repository/Build Configurations ######
        env:
          VITE_API_URL: ${{ vars.DEV_API_URL }}
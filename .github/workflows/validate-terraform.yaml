name: Validate - Terraform

on:
  push:
      branches: [ "main", "feat/ci-test"  ]
      paths:
      - 'src/infrastructure/terraform/**'
      - '.github/workflows/validate-terraform.yaml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'src/infrastructure/terraform/**'
      - '.github/workflows/validate-terraform.yaml'

jobs:
  validate-terraform:
    name: 'Validate Terraform'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
      pull-requests: write
      id-token: write # Neccesary for connecting to AWS using OIDC
    defaults:
      run:
        working-directory: ./src/infrastructure/terraform
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::757693031168:role/GithubDeploymentRoleHippoReserve
          aws-region: eu-west-1

      - name: Terraform Init
        id: init
        run: terraform init --backend-config="bucket=hippo-booking-terraform" --backend-config="key=terraform.Test.tfstate" --backend-config="region=eu-west-1"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file="Test.tfvars" -no-color
        env:
          TF_VAR_google_client_secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          TF_VAR_github_repo: https://github.com/${{ github.repository }}
          TF_VAR_github_access_token: ${{ secrets.FRONTEND_DEPLOY_TOKEN }}
          TF_VAR_slack_token: ${{ secrets.SLACK_TOKEN }}
          TF_VAR_slack_signing_secret: ${{ secrets.SLACK_SIGNING_SECRET }}
          TF_VAR_slack_channel_email: ${{ secrets.SLACK_CHANNEL_EMAIL }}
          TF_VAR_google_credentials: ${{ secrets.GOOGLE_CREDENTIALS }}
        continue-on-error: ${{ github.event_name == 'pull_request' }}

      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

    #https://github.com/hashicorp/setup-terraform

name: Main CI

on:
  push:
    branches: [ "main", "feat/ci-test" ]
  pull_request:
    branches: [ "main" ]

jobs:
        
  build-backend:
    name: 'Build Back End API'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        working-directory: ./src
        run: dotnet restore

      - name: Build API
        working-directory: ./src
        run: dotnet build --no-restore

      - name: Run Application Unit Tests
        run: dotnet test src/api/tests/**/Hippo.Booking.Application.Tests.csproj --no-build --verbosity normal

      - name: Run Core Unit Tests
        run: dotnet test src/api/tests/**/Hippo.Booking.Core.Tests.csproj --no-build --verbosity normal

      - name: Run Docker Compose
        run: docker compose -f src/infrastructure/docker/docker-compose-ci.yml up -d

      - name: Sleep for 5 seconds
        run: sleep 5s
        shell: bash

      - name: Run Integration Tests
        run: dotnet test src/api/tests/**/Hippo.Booking.Integration.Tests.csproj --no-build --verbosity normal

  build-frontend:
    name: 'Build Front End App'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          
      - name: Enable Corepack
        run: corepack enable

      - name: install canvas
        run: sudo apt-get install build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev

      - name: Run install
        uses: borales/actions-yarn@v4
        with:
          cmd: install
          dir: ./src/web/hippo-booking

      - name: Build production bundle
        uses: borales/actions-yarn@v4
        with:
          cmd: build
          dir: ./src/web/hippo-booking
          
      - name: Test the app
        uses: borales/actions-yarn@v4
        with:
          cmd: ci-test
          dir: ./src/web/hippo-booking
          
#      - name: Run Cypress Tests
#        working-directory: ./src/web/hippo-booking
#        run: |
#          npx cypress run --component

  validate-terraform:
    runs-on: ubuntu-latest
    name: 'Validate Terraform'
    timeout-minutes: 5
    if: github.event_name != 'pull_request'
    defaults:
      run:
        working-directory: ./src/infrastructure/terraform
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init --backend-config="bucket=hippo-booking-terraform" --backend-config="key=terraform.Development.tfstate" --backend-config="region=eu-west-1"

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan
        env:
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_google_client_id: ${{ secrets.GOOGLE_CLIENT_ID }}
          TF_VAR_google_client_secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          TF_VAR_github_repo: https://github.com/${{ github.repository }}
          TF_VAR_github_access_token: ${{ secrets.FRONTEND_DEPLOY_TOKEN }}
          TF_VAR_slack_token: ${{ secrets.SLACK_TOKEN }}
          TF_VAR_slack_signing_secret: ${{ secrets.SLACK_SIGNING_SECRET }}
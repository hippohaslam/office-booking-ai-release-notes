name: Deploy Environment

on:
  workflow_dispatch:
    inputs:
        environment:
            type: choice
            description: 'Environment to deploy to'
            required: true
            default: 'Test'
            options:
            - 'Test'
            - 'Production'

jobs:
  build-backend:
    name: 'Build Back End API'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
          cache: true
          cache-dependency-path: |
            src/**/packages.lock.json

      - name: Restore dependencies
        working-directory: ./src
        run: dotnet restore --locked-mode

      - name: Build API
        working-directory: ./src
        run: dotnet build --no-restore

      - name: Run Core Unit Tests
        run: dotnet test src/api/tests/**/Hippo.Booking.Core.Tests.csproj --no-build --verbosity normal

      - name: Run Application Unit Tests
        run: dotnet test src/api/tests/**/Hippo.Booking.Application.Tests.csproj --no-build --verbosity normal

      - name: Run Infrastructure Unit Tests
        run: dotnet test src/api/tests/**/Hippo.Booking.Infrastructure.Tests.csproj --no-build --verbosity normal

      - name: Run Docker Compose
        run: docker compose -f src/infrastructure/docker/docker-compose-ci.yml up -d

      - name: Sleep for 5 seconds
        run: sleep 5s
        shell: bash

      - name: Run Integration Tests
        run: dotnet test src/api/tests/**/Hippo.Booking.Integration.Tests.csproj --no-build --verbosity normal

      - name: Publish API
        run: |
          dotnet publish src/api/Hippo.Booking.API/Hippo.Booking.API.csproj -c Release --output "publish"
          cd publish
          zip -r ../${{github.run_id}}.zip .

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4.6.0
        with:
          name: deploy-files
          path: ${{github.run_id}}.zip
          retention-days: 1
          
  build-frontend:
    name: 'Build Front End App'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Enable Corepack
        run: corepack enable

      - name: Run install
        uses: borales/actions-yarn@v5
        with:
          cmd: install
          dir: ./src/web/hippo-booking

      - name: Build production bundle
        uses: borales/actions-yarn@v5
        with:
          cmd: build
          dir: ./src/web/hippo-booking

      - name: Test the app
        uses: borales/actions-yarn@v5
        with:
          cmd: ci-test
          dir: ./src/web/hippo-booking
          
#      - name: Run Cypress Tests
#        working-directory: ./src/web/hippo-booking
#        run: |
#          npx cypress run --component

  e2e-tests:
    name: 'Run End-to-End Tests'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-1
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
          cache: true
          cache-dependency-path: |
            src/e2e/**/packages.lock.json

      - name: Restore dependencies
        working-directory: ./src/e2e/Hippo.Booking.E2ETests
        run: dotnet restore --locked-mode

      - name: Build E2E Tests
        working-directory: ./src/e2e/Hippo.Booking.E2ETests
        run: dotnet build --no-restore --configuration Release

      - name: Run Docker Compose
        run: docker compose -f infrastructure/docker/docker-compose-ci.yml -f infrastructure/docker/docker-compose-services.yml up -d

      - name: Run E2E Tests
        working-directory: ./src/e2e/Hippo.Booking.E2ETests
        env:
          User__Email: ${{ secrets.AUTOMATION_USER }}
          User__Password: ${{ secrets.AUTOMATION_PASSWORD }}
          User__Id: ${{ secrets.AUTOMATION_USERID }}
        run: xvfb-run dotnet test --no-build --verbosity normal --configuration Release

      - name: Run accessibility scans
        working-directory: ./src/web/hippo-booking
        run: npx pa11y-ci

  deploy-environment:
    name: 'Deploy Environment'
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend, e2e-tests]
    environment:
      name: ${{ github.event.inputs.environment }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: 1.7.3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-1
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Init
        id: init
        working-directory: ./src/infrastructure/terraform
        run: terraform init --backend-config="bucket=hippo-booking-terraform" --backend-config="key=terraform.${{ github.event.inputs.environment }}.tfstate" --backend-config="region=eu-west-1"

      - name: Terraform Validate
        id: validate
        working-directory: ./src/infrastructure/terraform
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ./src/infrastructure/terraform
        run: terraform plan -out plan.plan -var-file="${{ github.event.inputs.environment }}.tfvars"
        env:
          TF_VAR_google_client_secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          TF_VAR_github_repo: https://github.com/${{ github.repository }}
          TF_VAR_github_access_token: ${{ secrets.FRONTEND_DEPLOY_TOKEN }}
          TF_VAR_slack_token: ${{ secrets.SLACK_TOKEN }}
          TF_VAR_slack_signing_secret: ${{ secrets.SLACK_SIGNING_SECRET }}
          TF_VAR_slack_channel_email: ${{ secrets.SLACK_CHANNEL_EMAIL }}

      - name: Terraform Apply
        id: apply
        working-directory: ./src/infrastructure/terraform
        run: terraform apply plan.plan

      - name: Terraform Outputs
        id: outputs
        working-directory: ./src/infrastructure/terraform
        run: |
          echo "elastic_beanstalk_application_name=$(terraform output elastic_beanstalk_application_name)" >> $GITHUB_OUTPUT
          echo "elastic_beanstalk_environment_name=$(terraform output elastic_beanstalk_environment_name)" >> $GITHUB_OUTPUT
          echo "amplify_app_name=$(terraform output amplify_app_name)" >> $GITHUB_OUTPUT

      - uses: actions/download-artifact@v4.1.8

      - name: Get Amplify App Id
        run: |
          APPID=$(aws amplify list-apps | jq '.apps[] | select(.name == ${{ steps.outputs.outputs.amplify_app_name }})'.appId)
          echo "APP_ID=$APPID" >>${GITHUB_ENV}

      - name: Start Amplify Frontend Deployment Job
        run: |
          echo "Deploying app"
          JOB_ID=$(aws amplify start-job --app-id ${{ env.APP_ID }} --branch-name main --job-type RELEASE | jq -r '.jobSummary.jobId')
          echo "Release started"
          echo "Job ID is $JOB_ID"
          echo "JOB_ID=$JOB_ID" >>${GITHUB_ENV}

      - name: Deploy Backend to Elastic Beanstalk
        run: |
          aws s3 cp "deploy-files/${{github.run_id}}.zip" s3://elasticbeanstalk-eu-west-1-${{ vars.AWS_ACCOUNT_ID }}/artifact/hippo-booking-api/
          aws elasticbeanstalk create-application-version --application-name ${{ steps.outputs.outputs.elastic_beanstalk_application_name }} --version-label ${{github.run_id}} --description ${{github.run_id}} --source-bundle S3Bucket="elasticbeanstalk-eu-west-1-${{ vars.AWS_ACCOUNT_ID }}",S3Key="artifact/hippo-booking-api/${{github.run_id}}.zip"
          aws elasticbeanstalk update-environment --application-name ${{ steps.outputs.outputs.elastic_beanstalk_application_name }} --environment-name ${{ steps.outputs.outputs.elastic_beanstalk_environment_name }} --version-label ${{github.run_id}}
          aws elasticbeanstalk wait environment-updated --application-name ${{ steps.outputs.outputs.elastic_beanstalk_application_name }} --environment-name ${{ steps.outputs.outputs.elastic_beanstalk_environment_name }}

      - name: Wait for Amplify Frontend Deployment Job
        run: |
          while [[ "$(aws amplify get-job --app-id ${{ env.APP_ID }} --branch-name main --job-id ${{ env.JOB_ID }} | jq -r '.job.summary.status')" =~ ^(PENDING|RUNNING)$ ]]; do sleep 1; done
          JOB_STATUS="$(aws amplify get-job --app-id ${{ env.APP_ID }} --branch-name main --job-id ${{ env.JOB_ID }} | jq -r '.job.summary.status')"
          
          if [[ "$JOB_STATUS" == "FAILED" ]]; then
            echo "Job failed"
            exit 1
          fi
          
          echo "Job finished"
          echo "Job status is $JOB_STATUS"